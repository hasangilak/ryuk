version: '3.8'

services:
  neo4j:
    image: neo4j:5.15-community
    container_name: ryuk-neo4j
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4JLABS_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
      - neo4j_plugins:/plugins
      - ./infrastructure/neo4j/init:/docker-entrypoint-initdb.d
    networks:
      - ryuk-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: ryuk-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ryuk
      - POSTGRES_USER=ryuk_user
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ryuk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ryuk_user -d ryuk"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ryuk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ryuk-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: ryuk-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password123
      - DATABASE_URL=postgresql://ryuk_user:postgres123@postgres:5432/ryuk
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ryuk-network
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./apps/api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./apps/api/package.json

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: ryuk-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-super-secret-nextauth-key-change-in-production
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      - api
    networks:
      - ryuk-network
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./apps/web
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: ./apps/web/package.json

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_conf:
  neo4j_plugins:
  postgres_data:
  redis_data:

networks:
  ryuk-network:
    driver: bridge